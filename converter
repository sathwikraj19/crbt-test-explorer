<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>CSV Converter</title>
    <!-- Tailwind CSS CDN -->
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Inter', sans-serif;
            background-color: #f3f4f6; /* Light gray background */
        }
    </style>
</head>
<body class="flex items-center justify-center min-h-screen p-4">
    <div class="bg-white p-8 rounded-xl shadow-lg w-full max-w-md border border-gray-200">
        <h1 class="text-3xl font-bold text-center text-gray-800 mb-6">CSV Converter</h1>
        <p class="text-center text-gray-600 mb-8">
            Upload a space-separated CSV file to convert it to a pipe-separated format.
            The script intelligently handles spaces within the first column.
        </p>

        <!-- File Upload Section -->
        <div class="mb-6">
            <label for="fileInput" class="block text-sm font-medium text-gray-700 mb-2">
                Select your CSV file:
            </label>
            <input type="file" id="fileInput" accept=".csv, .txt"
                   class="block w-full text-sm text-gray-900 bg-gray-50 rounded-lg border border-gray-300 cursor-pointer
                          focus:outline-none focus:border-blue-500 focus:ring-1 focus:ring-blue-500
                          file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0
                          file:text-sm file:font-semibold file:bg-blue-50 file:text-blue-700
                          hover:file:bg-blue-100">
        </div>

        <!-- Convert Button -->
        <button id="convertButton"
                class="w-full bg-blue-600 text-white py-3 px-4 rounded-lg font-semibold text-lg
                       hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2
                       transition duration-200 ease-in-out shadow-md disabled:opacity-50 disabled:cursor-not-allowed"
                disabled>
            Convert File
        </button>

        <!-- Message Area -->
        <div id="messageArea" class="mt-6 text-center text-sm font-medium">
            <!-- Messages will be displayed here -->
        </div>

        <!-- Download Section (initially hidden) -->
        <div id="downloadSection" class="mt-8 hidden">
            <p class="text-center text-gray-700 mb-4">Conversion successful!</p>
            <a id="downloadLink" href="#" download="converted_output.csv"
               class="w-full inline-flex items-center justify-center bg-green-600 text-white py-3 px-4 rounded-lg font-semibold text-lg
                      hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-green-500 focus:ring-offset-2
                      transition duration-200 ease-in-out shadow-md">
                Download Converted File
                <svg class="ml-2 -mr-1 w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H5a2 2 0 01-2-2v-7a2 2 0 012-2h14a2 2 0 012 2v7a2 2 0 01-2 2z"></path>
                </svg>
            </a>
        </div>
    </div>

    <script>
        const fileInput = document.getElementById('fileInput');
        const convertButton = document.getElementById('convertButton');
        const messageArea = document.getElementById('messageArea');
        const downloadSection = document.getElementById('downloadSection');
        const downloadLink = document.getElementById('downloadLink');

        let fileContent = ''; // To store the content of the uploaded file

        // Enable/disable convert button based on file selection
        fileInput.addEventListener('change', (event) => {
            if (event.target.files.length > 0) {
                convertButton.disabled = false;
                messageArea.textContent = ''; // Clear previous messages
                downloadSection.classList.add('hidden'); // Hide download link
            } else {
                convertButton.disabled = true;
            }
        });

        // Handle file conversion on button click
        convertButton.addEventListener('click', () => {
            const file = fileInput.files[0];
            if (!file) {
                showMessage('Please select a file first.', 'text-red-600');
                return;
            }

            showMessage('Processing file...', 'text-gray-600');
            convertButton.disabled = true; // Disable button during processing

            const reader = new FileReader();

            reader.onload = (e) => {
                try {
                    fileContent = e.target.result;
                    const convertedContent = convertCsv(fileContent);

                    // Create a Blob from the converted content
                    const blob = new Blob([convertedContent], { type: 'text/csv;charset=utf-8;' });
                    const url = URL.createObjectURL(blob);

                    downloadLink.href = url;
                    // Suggest a filename based on the original file name
                    const originalFileName = file.name.split('.').slice(0, -1).join('.');
                    downloadLink.download = `${originalFileName}_converted.csv`;

                    downloadSection.classList.remove('hidden');
                    showMessage('File converted successfully!', 'text-green-600');

                } catch (error) {
                    console.error("Conversion error:", error);
                    showMessage(`Error during conversion: ${error.message}`, 'text-red-600');
                } finally {
                    convertButton.disabled = false; // Re-enable button
                }
            };

            reader.onerror = () => {
                showMessage('Error reading file.', 'text-red-600');
                convertButton.disabled = false; // Re-enable button
            };

            reader.readAsText(file);
        });

        /**
         * Converts space-separated CSV content to pipe-separated.
         * Assumes the last 5 "words" of each line are distinct columns,
         * and everything before them is part of the first column (message).
         * @param {string} csvContent The raw CSV content from the uploaded file.
         * @returns {string} The converted CSV content.
         */
        function convertCsv(csvContent) {
            const lines = csvContent.split(/\r?\n/); // Split by newlines, handling both Windows and Unix
            const convertedLines = [];
            const NUM_FIXED_COLUMNS = 5; // ENGLISH, 0, 3, SSD_EMNEWS, 1

            for (const line of lines) {
                if (line.trim() === '') {
                    convertedLines.push(''); // Preserve empty lines
                    continue;
                }

                // Split the line by one or more spaces
                const parts = line.trim().split(/\s+/);

                // Ensure there are enough parts to extract the fixed columns
                if (parts.length < NUM_FIXED_COLUMNS + 1) { // +1 for the message part
                    console.warn(`Skipping line due to insufficient fields: "${line}"`);
                    // Optionally, you could choose to just join with pipes or throw an error
                    // For now, we'll just join what's there, but warn.
                    convertedLines.push(parts.join('|'));
                    continue;
                }

                // Extract the last N fixed columns
                const fixedColumns = parts.slice(-NUM_FIXED_COLUMNS);

                // Everything before the fixed columns is the message part
                const messageParts = parts.slice(0, parts.length - NUM_FIXED_COLUMNS);
                const messageColumn = messageParts.join(' '); // Re-join with single spaces

                convertedLines.push(`${messageColumn}|${fixedColumns.join('|')}`);
            }
            return convertedLines.join('\n');
        }

        /**
         * Displays a message in the message area.
         * @param {string} message The message to display.
         * @param {string} className Tailwind CSS classes for styling the message.
         */
        function showMessage(message, className) {
            messageArea.textContent = message;
            messageArea.className = `mt-6 text-center text-sm font-medium ${className}`;
        }
    </script>
</body>
</html>
